" ---------
"  plugins
" ---------
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'justinmk/vim-sneak'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'vim-python/python-syntax'
call plug#end()

" ---------
"  general
" ---------
set nocompatible
filetype plugin indent on
syntax enable
set autoindent
set backspace=indent,eol,start
set ignorecase
set ttimeout
set ttimeoutlen=10
set hlsearch
set incsearch
set wildmenu
set number relativenumber
set noshowmode
set expandtab tabstop=4 shiftwidth=4 smarttab
set nowrap
set mouse=a

" -----------------
"  plugin settings
" -----------------
"  python-syntax
let g:python_highlight_all = 1

"  nord
colorscheme nord

" ----------
"  mappings
" ----------
noremap <F1> :w<CR>
nnoremap Y y$
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>
nnoremap <leader>b :b <C-d>

" -------
"  tools
" -------
"  git blame
command! -range GB echo join(systemlist("git -C " . shellescape(expand('%:p:h')) . " blame -L <line1>,<line2> " . expand('%:t')), "\n")

" ------------
"  statusline
" ------------
set laststatus=2
set statusline=
set statusline+=%#NormalColorText#%{(mode()=='n')?g:currentmode[mode()]:''}
set statusline+=%#NormalColorSep#%{(mode()=='n')?'\ ':''}
set statusline+=%#InsertColorText#%{(mode()=='i')?g:currentmode[mode()]:''}
set statusline+=%#InsertColorSep#%{(mode()=='i')?'\ ':''}
set statusline+=%#VisualColorText#%{(IsVisualMode())?g:currentmode[mode()]:''}
set statusline+=%#VisualColorSep#%{(IsVisualMode())?'\ ':''}
set statusline+=%#ReplaceColorText#%{(mode()=='R')?g:currentmode[mode()]:''}
set statusline+=%#ReplaceColorSep#%{(mode()=='R')?'\ ':''}
set statusline+=%8*
set statusline+=%{b:gitbranch}
set statusline+=%7*
set statusline+=
set statusline+=%8*
set statusline+=%{StatuslineReadonly()}
set statusline+=%7*
set statusline+=
set statusline+=%8*
set statusline+=%m
set statusline+=%7*
set statusline+=
set statusline+=%8*
set statusline+=%=
set statusline+=%7*
set statusline+=
set statusline+=%8*
set statusline+=%{StatuslineCurrentDirectory()}
set statusline+=%5*
set statusline+=
set statusline+=%6*
set statusline+=\  
set statusline+=%{StatuslinePercentOfFile()}
set statusline+=\  
set statusline+=%3*
set statusline+=
set statusline+=%4*
set statusline+=\  
set statusline+=%3l:%-2v
hi User3 ctermbg=darkgray ctermfg=lightgray guibg=darkgray guifg=lightgray
hi User4 ctermbg=lightgray ctermfg=black guibg=lightgray guifg=black
hi User5 ctermbg=black ctermfg=darkgray guibg=black guifg=darkgray
hi User6 ctermbg=darkgray ctermfg=black guibg=darkgray guifg=black
hi User7 ctermbg=black ctermfg=black guibg=black guifg=black
hi User8 ctermbg=black ctermfg=white guibg=black guifg=white
hi NormalColorText ctermbg=6 ctermfg=0
hi NormalColorSep ctermbg=0 ctermfg=6
hi InsertColorText ctermbg=3 ctermfg=0
hi InsertColorSep ctermbg=0 ctermfg=3
hi VisualColorText ctermbg=5 ctermfg=0
hi VisualColorSep ctermbg=0 ctermfg=5
hi ReplaceColorText ctermbg=1 ctermfg=0
hi ReplaceColorSep ctermbg=0 ctermfg=1

let g:currentmode={
      \ 'n': '  NORMAL ',
      \ 'no': '  N-OPERATOR PENDING ',
      \ 'v': '  VISUAL ',
      \ 'V': '  V-LINE ',
      \ '': '  V-BLOCK ',
      \ 's': 'Select ',
      \ 'S': 'S·Line ',
      \ '\<C-S>': 'S·Block ',
      \ 'i': '  INSERT ',
      \ 'R': '  REPLACE ',
      \ 'Rv': 'V·Replace ',
      \ 'c': 'Command ',
      \ 'cv': 'Vim Ex ',
      \ 'ce': 'Ex ',
      \ 'r': 'Prompt ',
      \ 'rm': 'More ',
      \ 'r?': 'Confirm ',
      \ '!': 'Shell ',
      \ 't': 'Terminal '
      \}

function! IsVisualMode()
  return (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# '  V-BLOCK ')
endfunction

function! StatuslineGitBranch()
  let b:gitbranch=""
  if &modifiable
    try
      let l:dir=expand('%:p:h')
      let l:gitrevparse = system("git -C ".l:dir." rev-parse --abbrev-ref HEAD")
      if !v:shell_error
        let b:gitbranch="  ".substitute(l:gitrevparse, '\n', '', 'g')." "
      endif
    catch
    endtry
  endif
endfunction

function! StatuslineReadonly()
  if &readonly || !&modifiable
    return ''
  else
    return ''
endfunction

function! StatuslineCurrentDirectory() abort
  return getcwd()." "
endfunction

function! StatuslinePercentOfFile()
  let current = line('.') + 0.0
  let total = line('$') + 0.0
  return printf('%.0f%%', (current / total) * 100)
endfunction

augroup GetGitBranch
  autocmd!
  autocmd VimEnter,WinEnter,BufEnter * call StatuslineGitBranch()
augroup END
