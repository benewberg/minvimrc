" ---------
"  plugins
" ---------
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'justinmk/vim-sneak'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'vim-python/python-syntax'
Plug 'lifepillar/vim-mucomplete'
call plug#end()

" ---------
"  general
" ---------
set nocompatible
filetype plugin indent on
syntax enable
set autoindent
set backspace=indent,eol,start
set ignorecase
set ttimeout
set ttimeoutlen=10
set hlsearch
set incsearch
set wildmenu
set number relativenumber
set noshowmode
set expandtab tabstop=4 shiftwidth=4 smarttab
set nowrap
set mouse=a
set showtabline=2

" -----------------
"  plugin settings
" -----------------
"  python-syntax
let g:python_highlight_all = 1

"  nord
colorscheme nord
hi Visual term=reverse cterm=reverse

"  vim-mucomplete
set completeopt-=preview
set completeopt+=longest,menuone,noselect,noinsert
set shortmess+=c   " Shut off completion messages
let g:mucomplete#enable_auto_at_startup = 1

" ----------
"  mappings
" ----------
noremap <F1> :w<CR>
nnoremap Y y$
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>g :GB<CR>

" -------
"  tools
" -------
"  git blame
command! -range GB echo join(systemlist("git -C " . shellescape(expand('%:p:h')) . " blame -L <line1>,<line2> " . expand('%:t')), "\n")

" ------------
"  statusline
" ------------
set laststatus=2
set statusline=
set statusline+=%#NormalColorText#%{(mode()=='n')?g:currentmode[mode()]:''}
set statusline+=%#InsertColorText#%{(mode()=='i')?g:currentmode[mode()]:''}
set statusline+=%#VisualColorText#%{(IsVisualMode())?g:currentmode[mode()]:''}
set statusline+=%#ReplaceColorText#%{(mode()=='R')?g:currentmode[mode()]:''}
set statusline+=%#NormalColorText#%{(IsOtherMode())?g:currentmode[mode()]:''}
set statusline+=%#Directory#
set statusline+=%{b:gitbranch}
set statusline+=%{StatuslineReadonly()}
set statusline+=%m
set statusline+=%=
set statusline+=%{StatuslineCurrentDirectory()}
set statusline+=%#Pmenu#
set statusline+=%{StatuslinePercentOfFile()}
set statusline+=%#TabLine#
set statusline+=\ %3l:%-2v
hi NormalColorText ctermbg=6 ctermfg=0 cterm=BOLD
hi InsertColorText ctermbg=4 ctermfg=0 cterm=BOLD
hi VisualColorText ctermbg=5 ctermfg=0 cterm=BOLD
hi ReplaceColorText ctermbg=11 ctermfg=0 cterm=BOLD

let g:currentmode={
    \ 'n': '  NORMAL ',
    \ 'no': '  N-OPERATOR PENDING ',
    \ 'v': '  VISUAL ',
    \ 'V': '  V-LINE ',
    \ '': '  V-BLOCK ',
    \ 's': '  SELECT ',
    \ 'S': '  S-LINE ',
	\ '' : '  S-BLOCK ',
    \ 'i': '  INSERT ',
    \ 'R': '  REPLACE ',
    \ 'Rv': '  V-REPLACE ',
    \ 'c': '  COMMAND ',
    \ 'cv': '  VIM EX ',
    \ 'ce': '  EX ',
    \ 'r': '  PROMPT ',
    \ 'rm': '  MORE ',
    \ 'r?': '  CONFIRM ',
    \ '!': '  SHELL ',
    \ 't': '  TERMINAL '
    \}

function! IsVisualMode()
  return (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# '  V-BLOCK ')
endfunction

function! IsOtherMode()
  return (!(mode() =~# '\v(n|no|v|V|R|i)') && !(IsVisualMode()))
endfunction

function! StatuslineGitBranch()
  let b:gitbranch=""
  if &modifiable
    try
      let l:dir=expand('%:p:h')
      let l:gitrevparse = system("git -C ".l:dir." rev-parse --abbrev-ref HEAD")
      if !v:shell_error
        let b:gitbranch="   ".substitute(l:gitrevparse, '\n', '', 'g')." "
      endif
    catch
    endtry
  endif
endfunction

function! StatuslineReadonly()
  if &readonly || !&modifiable
    return ''
  else
    return ''
endfunction

function! StatuslineCurrentDirectory() abort
  return getcwd()." "
endfunction

function! StatuslinePercentOfFile()
  let current = line('.') + 0.0
  let total = line('$') + 0.0
  return printf('  %.0f%% ', (current / total) * 100)
endfunction

augroup GetGitBranch
  autocmd!
  autocmd VimEnter,WinEnter,BufEnter * call StatuslineGitBranch()
augroup END
